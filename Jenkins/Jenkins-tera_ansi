pipeline {
    agent any

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION    = 'us-east-1'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/NehorayHillel/flask_resume.git'
                
                // Display the directory structure for debugging
                sh 'find . -type f -name "*.yml" | sort'
                sh 'find . -type f -name "*.tf" | sort'
            }
        }
        
        stage('Pre-cleanup') {
            steps {
                script {
                    // Run the AWS CLI inside a container with the entrypoint overridden.
                    docker.image('amazon/aws-cli').inside('--entrypoint=""') {
                        sh 'aws ec2 delete-key-pair --key-name jenkins-key || true'
                    }
                }
            }
        }
        
        stage('Terraform init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }
        
        stage('Plan') {
            steps {
                withCredentials([string(credentialsId: 'jenkins-public-key', variable: 'PUBLIC_KEY')]) {
                    dir('terraform') {
                        sh '''
                        terraform plan \
                          -var="jenkins_public_key=$PUBLIC_KEY" \
                          -out tfplan
                        '''
                        sh 'terraform show -no-color tfplan > tfplan.txt'
                    }
                }
            }
        }
        
        stage('Apply / Destroy') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'jenkins-public-key', variable: 'PUBLIC_KEY')]) {
                        dir('terraform') {
                            if (params.action == 'apply') {
                                if (!params.autoApprove) {
                                    def plan = readFile 'tfplan.txt'
                                    input message: "Do you want to apply the plan?",
                                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                                }
                                sh '''
                                terraform apply \
                                  -var="jenkins_public_key=$PUBLIC_KEY" \
                                  -input=false tfplan
                                '''
                            } else if (params.action == 'destroy') {
                                sh '''
                                terraform destroy \
                                  -var="jenkins_public_key=$PUBLIC_KEY" \
                                  --auto-approve
                                '''
                            } else {
                                error "Invalid action selected. Please choose either 'apply' or 'destroy'."
                            }
                        }
                    }
                }
            }
        }
        
        stage('Ansible Deploy') {
            when {
                expression { params.action == 'apply' }
            }
            steps {
                script {
                    // Capture Terraform outputs from the 'terraform' directory.
                    dir('terraform') {
                        def ec2_ip = sh(script: 'terraform output -raw ec2_public_ip', returnStdout: true).trim()
                        def rds_endpoint = sh(script: 'terraform output -raw rds_endpoint', returnStdout: true).trim()
                        env.EC2_PUBLIC_IP = ec2_ip
                        env.RDS_ENDPOINT = rds_endpoint
                        
                        // Print the outputs for debugging
                        echo "EC2 IP: ${ec2_ip}"
                        echo "RDS Endpoint: ${rds_endpoint}"
                    }
                    
                    // Save the SSH key from Jenkins credentials to a file
                    withCredentials([sshUserPrivateKey(credentialsId: 'fa1b01b5-48cf-438b-b35f-b7cb70b3b53e', keyFileVariable: 'SSH_KEY_FILE')]) {
                        sh 'cp "$SSH_KEY_FILE" jenkins_key.pem'
                        sh 'chmod 600 jenkins_key.pem'
                    }
                    
                    // Create the inventory template
                    writeFile file: 'inventory.ini', text: """[ec2]
${env.EC2_PUBLIC_IP} ansible_user=ubuntu ansible_ssh_private_key_file=jenkins_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'"""
                    
                    // Show the inventory file for debugging
                    sh 'cat inventory.ini'
                    
                    // Run the Ansible playbook
                    sh """
                    ansible-playbook -i inventory.ini ansible/deploy.yml \
                      -e "rds_endpoint=${env.RDS_ENDPOINT}" \
                      -e "rds_username=neho" \
                      -e "rds_password='!Twork314Nh'" \
                      -e "rds_database=resume_db" \
                      -e "rds_port=5432" \
                      -e "rds_ssl_mode=require" \
                      -vvv
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean up sensitive files
            sh 'rm -f jenkins_key.pem || true'
        }
        success {
            echo "Deployment completed successfully"
        }
        failure {
            echo "Deployment failed. Check the logs for details."
        }
    }
}